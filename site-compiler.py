#! /usr/bin/env python3

from os import listdir, path
import argparse

from markdown import markdown

from template import Template

INDEX_LOCATION = 'index.html'
SCRIPT_ROOT = path.dirname(path.realpath(__file__))
TEMPLATE_PATH = path.join(SCRIPT_ROOT, 'template.html')


def compile_markdown(root, template):
	parent = path.abspath(root)
	filtered = [
		path.join(parent, f) for f in listdir(parent)
			if filter_file(path.join(parent, f))
	]

	processedFiles = process_markdown(filtered, template)
	build_index(parent, processedFiles, template)


def filter_file(filePath):
	return path.isfile(filePath) and path.splitext(filePath)[1] == '.md'


def process_markdown(files, template):
	outputFiles = []
	for markdownPath in files:
		htmlPath = markdownPath.rstrip('.md') + '.html'

		with open(markdownPath, mode='r', encoding='utf-8') as markdownFile:
			html = markdown(markdownFile.read(), output_format='html')

		with open(htmlPath, mode='w', encoding='utf-8') as htmlFile:
			htmlFile.write(template.format(html))

		outputFiles.append(htmlPath)

	return outputFiles


def build_index(root, processed, template):
	inner = ''
	html = '''
		<ul>%s</ul>
		<p>This is an index auto-generated by site-compiler.</p>
	'''
	indexPath = path.join(root, INDEX_LOCATION)

	for processedPath in processed:
		link = path.basename(processedPath)
		name = path.splitext(link)[0]
		inner += '<li><a href="%s">%s</a></li>' % (link, name)

	with open(indexPath, mode='w', encoding='utf-8') as indexFile:
		indexFile.write(template.format(html % inner))


def main():
	template = Template(TEMPLATE_PATH)

	parser = argparse.ArgumentParser()
	parser.add_argument('directories', type=path.abspath, nargs='+')
	args = parser.parse_args()
	for directory in args.directories:
		compile_markdown(directory, template)

if __name__ == '__main__':
	main()
